
services:
  app: # Service untuk aplikasi Node.js Anda
    build: . # Build dari Dockerfile yang ada di direktori saat ini
    ports:
      - "3000:3000" # Map port 3000 di host ke port 3000 di container
    volumes:
      - .:/app # Mount volume untuk development, agar perubahan kode di host langsung terlihat di container
      - /app/node_modules # Kecualikan node_modules dari mounting agar tidak menimpa yang sudah diinstal di container
      - ./public/uploads:/app/public/uploads # Mount folder uploads agar file tetap ada di host
    environment: # Variabel lingkungan untuk aplikasi Node.js
      PORT: 3000
      DB_HOST: db # Nama service database di docker-compose sebagai hostname
      DB_USER: ${DB_USER} # Ambil dari .env file di host
      DB_PASSWORD: ${DB_PASSWORD} # Ambil dari .env file di host
      DB_NAME: ${DB_NAME} # Ambil dari .env file di host
      JWT_SECRET: ${JWT_SECRET} # Ambil dari .env file di host
      APP_URL: http://localhost:3000 # Atau URL yang sesuai jika di deploy
    depends_on: # Pastikan service 'db' berjalan sebelum 'app'
      - db
    env_file: # Memuat variabel lingkungan dari file .env di host ke dalam container (alternatif ke 'environment')
      - ./.env # Pastikan file .env ada di root project Anda

  db: # Service untuk database MySQL
    image: mysql:8.0 # Gunakan image MySQL versi 8.0
    ports:
      - "3306:3306" # Map port MySQL di host
    environment: # Variabel lingkungan untuk konfigurasi MySQL
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD} # Password root MySQL (bisa sama dengan DB_PASSWORD)
      MYSQL_DATABASE: ${DB_NAME} # Nama database yang akan dibuat
      MYSQL_USER: ${DB_USER} # User database
      MYSQL_PASSWORD: ${DB_PASSWORD} # Password user database
    volumes:
      - db_data:/var/lib/mysql # Persistent volume untuk data database
    healthcheck: # Healthcheck untuk memastikan database siap sebelum aplikasi terhubung
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      start_period: 10s

volumes:
  db_data: # Definisi persistent volume untuk data database